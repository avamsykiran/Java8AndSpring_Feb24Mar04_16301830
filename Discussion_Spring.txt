
https://github.com/avamsykiran/Java8AndSpring_Feb24Mar04_16301830.git

Spring
---------------------------------

    Java Development Platform

        + Modular
            Spring Core             Dependency Injection
            Spring Context          ApplicationContext      lightweight Container
            Spring SpEL             Spring expression Languege
            Spring Web              WebMVC and REST API
            Spring AOP              Aspect Oriented Programming
            Spring JDBC             JdbcTemplate
            Spring ORM              Object relational mapping  
            Spring Data             Autoized repository provider
            Spring Data REST        Autoized repository and rest api provider    
            Spring Test             Testing library for Spring Modules
            Spring Security         Security Provider
            Spring Boot             Auto Configuarations
                ....etc

        + Interaparable

AGENDA
----------------------------------------------------------------------------------
            Spring Core             Dependency Injection
            Spring Context          ApplicationContext      lightweight Container
            Spring SpEL             Spring expression Languege
            Spring Web              WebMVC and REST API
            Spring Data             Autoized repository provider
            Spring Boot             RAD -Rapid Application Development
                                     through Auto Configuarations

Spring IoC
------------------------------------------------------------------------------------

        DB   [ dao <----> Service <-----> UI ]  END User
        
            EmployeeDao             interface
            EmployeeDaoJdbcImpl     implementation class
            EmployeeDaoOrmImpl      implementation class

            EmployeeService         interface
            EmployeeServiceImpl     implementation class

            class EmployeeServiceImpl implements EmployeeService {
                
                //EmployeeDao dao = new EmployeeDaoJdbcImpl();
                EmployeeDao dao = new EmployeeDaoOrmImpl();
                ......................
            }            
            
        Inversion of control  achive DI (Dependency Injection)

            class EmployeeServiceImpl implements EmployeeService {
                EmployeeDao dao;

                public EmployeeServiceImpl(EmployeeDao dao){
                    this.dao=dao;
                }    

                public void setDao(EmployeeDao dao){
                    this.dao=dao;
                }
                ......................
            }        

            new EmployeeServiceImpl(new EmployeeDaoJdbcImpl());
            new EmployeeServiceImpl(new EmployeeDaoOrmImpl()); //injection by constructor

            Dependency Injection
                    Constructor Injection
                    Setter Injection
                    Field  Injection
                    Method Injection


        Bean Manager - Container
                            is a piece of software that can 
                                    create, supply and destroy the objects
                                    of components (beans) in the application.    

        Spring Core         BeanFactory
        Spring Context      ApplicationContext
        
                                Configure the beans
                                    1. tell how many beans are needed in an application
                                    2. which bean depends on which other bean


                                How do we Configure?
                                        XML based configuaration
                                        Annotation based configuaration

                                            @Configuaration
                                            @ComponentScan("packageName")
                                            public class MyConfig {

                                            }

                                            @Component
                                            public class MyService1{    //myService1
                                                
                                            }    

                                            @Component
                                            public class MyService2{    //myService2
                                                
                                            }    

                                            @Component("ms3")
                                            public class MyService3{    //ms3
                                                
                                            }    

                                            @Component
                                                @Service
                                                @Resource
                                                @Respository
                                                @Controller
                                                @RestController
                                                @ControllerADvice
                                                @RestControllerAdvice
                                                ..etc

                                            @Value('spel') 
                                               injecting a external value 
                                                        into a field

                                                spel
                                                            ${propertyKey}
                                                            #{gs.prop1}

                                            @Autowired
                                                    for injection one bean into antoehr

                                                @Autowired
                                                private MyDao dao;      //Field Injection

                                                @Autowired
                                                public MyBlahFee(MyOtherFoo f){  //constructor injection

                                                }    

                                                @Autowired
                                                public void setFoo(Foo f){  //Setter Injection

                                                }


                                            @Autoized
                                                    default happen by type

                                                    but if byType conflicts,

                                                            1. byName
                                                                    @Qualifier
                                                            2. byType
                                                                    @Primary

                                            @Scope("")

                                                singleton      default     
                                                protoytpe
                                                                WebApplictionContext
                                                request
                                                session
                                                global-session


                                        Java Based Configuaration

                                            @Configuaration                                            
                                            public class MyConfig {

                                                @Bean        
                                                public Random random(){   //random
                                                    return new Random();
                                                }        
                                            }

    Spring Web 
    -------------------------------------------------

        SingleFronController Design Pattern
                                                Controller1   <---> Service1  <---> DAO1  
        EndUser ---REQ---> FrontController ---> Controller2   <---> Service2  <---> DAO2
                                                Controller3   <---> Service3  <---> DAO3
                                                    |
                                                    | (model)
                                                    |
                 <-----Response------           View 1
                                                View 2
                                                View 3

        FrontController?
                            config DispatcherServlet to receive all request (/**)

        Controller?

                            is any class that is marked with @Controller

                            a controller is expected to have methods
                                - that return a view name
                                - or a model and a view name.

        How can a DispatcherServlet (FrontController) know
        which request is handled by which controller?
        ---------------------------------------------------------    

                DispatcherServlet depends on UrlHandler.
                Many implementations of UrlHandler.

                SimpleUrlHandler is a common and msot used UrlHandler
                that is default available.

                it expects that each method in the controller class
                is marked with @RequestMapping(url,httpMethod)


        Once the method in controller returns a viewName
        how to identify the view (page) related to the givne viewName?
        -------------------------------------------------------------------

            DispatcherServlet depends on ViewResolver.

            ViewResolver
                    BeanResourceViewResolver
                    XmlResourceViewResolver
                    InternalResourceViewResolver

            InternalResourceViewResolver                    

                    set the properties prefix and suffix.

                    actualView = prefix + viewName + suffix;

    @ReqeustMapping(url,method=RequestMethod.GET)
    @GetMapping(url)

    @ReqeustMapping(url,method=RequestMethod.POST)
    @PostMapping(url)

    @RequestParam("unm")           reqeust.getParameter("unm")

    @ModelAttribute
                        is used map the form fields 
                        witht he properties of a model
                        provided the names match.








