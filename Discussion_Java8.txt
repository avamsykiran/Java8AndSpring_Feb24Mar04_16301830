
https://github.com/avamsykiran/Java8AndSpring_Feb24Mar04_16301830.git

JDK8
--------------------------------

    default and static method in interfaces

            interface Shape {
                int getPerimeter();
                int getArea();
                default int getVolume(){
                    return 0;
                }
            }

            class Rectangle implements Shape{
                int getPerimeter(){
                    ....
                }
                int getArea(){
                    ....
                }
            }

            class Circle implements Shape{
                int getPerimeter(){
                    ....
                }
                int getArea(){
                    ....
                }
            }

            class Cone implements Shape{
                int getPerimeter(){
                    ....
                }
                int getArea(){
                    ....
                }
                int getVolume(){
                    ...
                }
            }

            
            class Cylinder implements Shape{
                int getPerimeter(){
                    ....
                }
                int getArea(){
                    ....
                }
                int getVolume(){
                    ...
                }
            }

    Functional Interfaces
    ------------------------------------------
    
        an interface having only one abstract method is
        called a functional interface.

        @FunctionalInterface
        interface MyInterface{
            String greet(Stirng username);            
        }

        Suppliers           returns a value but has no args
        Consumers           does not return a value but has args
        Predicates          always returns boolean irrespective of having args or not.
        Operators           returns a value other than boolean and also has args
    
        package java.util.function

    Lambda Expressions
    ------------------------------------------

        MyInterface intrObj = (unm) -> {
            return "Hello "+unm;
        };

        intrObj.greet("Vamsy");

        MyInterface intrObj2 = (unm) -> ("Hai "+unm) ;
        intrObj2.greet("Vamsy");

    Streams API
    -----------------------------------------------
            
        java.util.stream.Stream
        java.util.stream.ParellelStream

            a flow of data from a data source, 
            data source can be an array or a collection or a map


            Stream<Employee> semp = Stream.of(new Employee[] {});
            ParellelStream<Employee> psemp = ParellelStream.of(new Employee[] {});

            Stream<Employee> semp = empList.stream();
            ParellelStream<Employee> psemp = empList.parellelStream();

            A stream is a replacement for a loop.

                forEach(Consumer)           Terminal Operator                
                reduce(BinaryOperator)      Terminal Operator
                collect(Collector)         
                

                            Collectors.toList();
                            Collectors.toSet();
                            Collectors.toMap();
                
                filter(Predicate)           Intermideate Operator
                map(transformer)            Intermideate Operator                    
                flatMap(transformer)        Intermideate Operator   


                int[] ar = {1,2,3,4,5};

                Stream.of(ar).reduce((e1,e2) -> e1+e2); ((1+2)+3)+4)+5)

                    loop            stream          parellelStream
                    ================================================

small dataset       out performes   optimal
large dataset                       optimal          out performes


Maintability                        better           better   
Readability                         better           better   


    Date and Tiem API
    ---------------------------------------------
        java.time

                LocalDate
                LocalTime
                LocalDateTime
                                factory methods
                                --------------------
                                .now()
                                .of(yr,mon,day,hour,min,sec);
                               
                                instacne methods
                                ------------------- 
                                getField
                                plusField
                                minusField
                                isAFter
                                isBefore
                                compareTo
                                equals

                ZonedDate
                ZonedTime
                ZonedDateTime
                                .now(ZoneId)
                                
                                instacne methods
                                ------------------- 
                                getField
                                plusField
                                minusField
                                isAFter
                                isBefore
                                compareTo
                                equals

                ZoneId
                                .of("GMT+5")

                DateTimeFormatter
                                .ofPattern("")

                                d,dd            day
                                M,MM,MMM,MMMM   month
                                yy,yyyy         year

                                h,hh            12 hr Hour
                                H,HH            24 hr Hour    
                                m,mm            min
                                s,ss            sec
                                a               am/pm

                Period
                                .between(Start,end);    in terms of m=years,month and days
                
                Duration
                                .between(start,end);    in terms of days,hours and mins
                                    












